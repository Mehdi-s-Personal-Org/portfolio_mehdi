[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.2.3","content-config-digest","7b9412558bac0a8c","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"prefetch\":true,\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"slack-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,57,58],"raycast-extension",{"id":11,"data":13,"body":18,"filePath":19,"assetImports":20,"digest":26,"rendered":27},{"title":14,"cover":15,"description":16,"publishedAt":17},"Raycast extension","__ASTRO_IMAGE_../../assets/post-images/raycast-extensions/cover.png","How I use Raycast on a daily basis",["Date","2024-09-10T00:00:00.000Z"],"## **What is a Launcher and Why Do I Need It?**\n\nIn the fast-paced digital world, **efficiency is key**. As someone who spends a significant amount of time on a Mac and who is always looking to optimize my workflow, I’ve always been on the lookout for tools that streamline my workflow and reduce friction. This is where **launchers** come into play. A launcher is essentially a command bar that allows you to quickly access apps, files, and perform various tasks using just your keyboard. Think of it as a powerful, customizable version of Spotlight, but with far more capabilities.\n\n**Raycast**, in particular, is a modern take on the classic launcher concept, much like Alfred but with a more contemporary twist. While Alfred has been a go-to for many, Raycast brings a fresh perspective, blending sleek design with powerful features that make it an **indispensable tool** for anyone looking to enhance their productivity.\n![Raycast](../../assets/post-images/raycast-extensions/onboarding.png)\n\n## **The Main Features of Raycast**\n\nRaycast offers a range of features that are incredibly useful, and the best part is that many of these are available for free. Here are some of the key functionalities that this tool has to offer to newcomers.\n\n- **Snippets**: One of the features I rely on most frequently is Snippets. This functionality enables me to conveniently store and swiftly insert blocks of text, code, or commonly used phrases. It proves invaluable for streamlining repetitive typing tasks. Primarily, I leverage it for managing various email addresses across work, school, and the ubiquitous spam account. By employing shortcuts like '!spam' or even incorporating my prettierrc configuration as a snippet, I enhance efficiency and streamline my workflow seamlessly. ![Snippets](../../assets/post-images/raycast-extensions/snippets.png)\n\n- **Clipboard History**: Raycast's clipboard history feature is a game-changer, offering users a seamless way to access a wide variety of previously copied items, including text within images. In the Pro tier, users enjoy unlimited history storage, ensuring easy retrieval of any copied content. However, the Free tier provides ample clipboard history storage for most users. Let's face it, how often do we really need to revisit something we copied over a week ago? These features alone would make Raycast a strong contender in the world of productivity tools, but it doesn’t stop there. ![Clipboard history](../../assets/post-images/raycast-extensions/clipboard.png)\n\n## **The Raycast Store and Community Extensions**\n\nOne of the standout aspects of Raycast is its thriving community and the extensive collection of extensions available in the Raycast Store. It’s amazing to see how the community has embraced the platform, developing extensions that cater to almost every need imaginable.\nFor example:\n\n- **GitHub Extensions**: Perfect for developers, allowing quick access to repositories, issues, and pull requests without leaving the command bar.\n\n- **Jira Extensions**: Ideal for project managers, enabling efficient task and project management directly from Raycast.\n\n- **Notion Integration**: For those who live in Notion, this extension makes it easy to search and navigate your workspace.\n\n![Store picture](../../assets/post-images/raycast-extensions/store.png)\n\nThe store is constantly growing, with new extensions being added regularly. Whether you need a tool for project management, code review, or even just a weather forecast, chances are there’s an extension for it. This level of community involvement not only enhances the versatility of Raycast but also ensures that the tool evolves in line with user needs.\n\n## **Building Extensions: Easier Than You Think**\n\nIf you have experience in web development and are familiar with TypeScript (TSX), you’ll find that building your own Raycast extensions is surprisingly straightforward. The platform is designed to be developer-friendly, with comprehensive documentation and an active community that’s always willing to help.\n\nCreating custom extensions allows you to tailor Raycast even further to your specific needs, making it not just a tool you use, but a tool that’s uniquely yours. This extensibility is one of Raycast’s most powerful features, and it’s incredibly rewarding to see your own tools in action, seamlessly integrated into your workflow and shared across the community.\n\nI’m excited to share that I’ve developed an extension called **Single-Focus**. This simple yet effective tool allows you to quit all open applications except for the one currently in focus.\n\nYou can find it in the Raycast store using the link below to install it\n\n\u003Cdiv style=\"display: flex; justify-content: center;\">\n    \u003Ca title=\"Install Single-Focus Raycast Extension\" href=\"https://www.raycast.com/Mmehdi06/single-focus\">\n        \u003Cimg src=\"https://www.raycast.com/Mmehdi06/single-focus/install_button@2x.png?v=1.1\" height=\"80\" alt=\"Install Single-Focus\" style=\"height: 80px;\">\n    \u003C/a>\n\u003C/div>\n\n## **AI Features and Paid Options**\n\nRaycast also offers a suite of AI-powered features that take the platform to the next level. One of the most notable is the **AI Chat with Presets**. This feature allows you to integrate AI-driven chat capabilities directly into your workflow, complete with customizable presets for different tasks. Whether you need to draft an email, summarize a document, or brainstorm ideas, the AI chat is there to assist, making it a valuable tool for anyone who relies on creative or analytical work.\n\nWhile many of Raycast’s features are free, there are also premium options available that unlock additional functionality. These paid features are well worth considering if you find yourself relying heavily on Raycast for your daily tasks, as they can further enhance your productivity and streamline your workflow.\n\n## **Conclusion**\n\nRaycast has quickly become an essential part of my daily routine. From its core features like Snippets and Window Management to the expansive world of community-built extensions, it’s a tool that adapts to my needs and grows with my workflow. Whether you’re a developer, project manager, or just someone looking to get more done in less time, Raycast offers something for everyone.\n\nIf you’re serious about productivity and you’re on a Mac, I highly recommend giving Raycast a try. With its blend of free features, powerful extensions, and cutting-edge AI capabilities, it’s more than just a launcher—it’s the **ultimate productivity companion**.","src/content/posts/raycast-extension.md",[21,22,23,24,25],"../../assets/post-images/raycast-extensions/onboarding.png","../../assets/post-images/raycast-extensions/snippets.png","../../assets/post-images/raycast-extensions/clipboard.png","../../assets/post-images/raycast-extensions/store.png","../../assets/post-images/raycast-extensions/cover.png","5d380de5b3fea4b1",{"html":28,"metadata":29},"\u003Ch2 id=\"what-is-a-launcher-and-why-do-i-need-it\">\u003Cstrong>What is a Launcher and Why Do I Need It?\u003C/strong>\u003C/h2>\n\u003Cp>In the fast-paced digital world, \u003Cstrong>efficiency is key\u003C/strong>. As someone who spends a significant amount of time on a Mac and who is always looking to optimize my workflow, I’ve always been on the lookout for tools that streamline my workflow and reduce friction. This is where \u003Cstrong>launchers\u003C/strong> come into play. A launcher is essentially a command bar that allows you to quickly access apps, files, and perform various tasks using just your keyboard. Think of it as a powerful, customizable version of Spotlight, but with far more capabilities.\u003C/p>\n\u003Cp>\u003Cstrong>Raycast\u003C/strong>, in particular, is a modern take on the classic launcher concept, much like Alfred but with a more contemporary twist. While Alfred has been a go-to for many, Raycast brings a fresh perspective, blending sleek design with powerful features that make it an \u003Cstrong>indispensable tool\u003C/strong> for anyone looking to enhance their productivity.\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/post-images/raycast-extensions/onboarding.png&#x22;,&#x22;alt&#x22;:&#x22;Raycast&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch2 id=\"the-main-features-of-raycast\">\u003Cstrong>The Main Features of Raycast\u003C/strong>\u003C/h2>\n\u003Cp>Raycast offers a range of features that are incredibly useful, and the best part is that many of these are available for free. Here are some of the key functionalities that this tool has to offer to newcomers.\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Snippets\u003C/strong>: One of the features I rely on most frequently is Snippets. This functionality enables me to conveniently store and swiftly insert blocks of text, code, or commonly used phrases. It proves invaluable for streamlining repetitive typing tasks. Primarily, I leverage it for managing various email addresses across work, school, and the ubiquitous spam account. By employing shortcuts like ‘!spam’ or even incorporating my prettierrc configuration as a snippet, I enhance efficiency and streamline my workflow seamlessly. \u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/post-images/raycast-extensions/snippets.png&#x22;,&#x22;alt&#x22;:&#x22;Snippets&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Clipboard History\u003C/strong>: Raycast’s clipboard history feature is a game-changer, offering users a seamless way to access a wide variety of previously copied items, including text within images. In the Pro tier, users enjoy unlimited history storage, ensuring easy retrieval of any copied content. However, the Free tier provides ample clipboard history storage for most users. Let’s face it, how often do we really need to revisit something we copied over a week ago? These features alone would make Raycast a strong contender in the world of productivity tools, but it doesn’t stop there. \u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/post-images/raycast-extensions/clipboard.png&#x22;,&#x22;alt&#x22;:&#x22;Clipboard history&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-raycast-store-and-community-extensions\">\u003Cstrong>The Raycast Store and Community Extensions\u003C/strong>\u003C/h2>\n\u003Cp>One of the standout aspects of Raycast is its thriving community and the extensive collection of extensions available in the Raycast Store. It’s amazing to see how the community has embraced the platform, developing extensions that cater to almost every need imaginable.\nFor example:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>GitHub Extensions\u003C/strong>: Perfect for developers, allowing quick access to repositories, issues, and pull requests without leaving the command bar.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Jira Extensions\u003C/strong>: Ideal for project managers, enabling efficient task and project management directly from Raycast.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Notion Integration\u003C/strong>: For those who live in Notion, this extension makes it easy to search and navigate your workspace.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../assets/post-images/raycast-extensions/store.png&#x22;,&#x22;alt&#x22;:&#x22;Store picture&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>The store is constantly growing, with new extensions being added regularly. Whether you need a tool for project management, code review, or even just a weather forecast, chances are there’s an extension for it. This level of community involvement not only enhances the versatility of Raycast but also ensures that the tool evolves in line with user needs.\u003C/p>\n\u003Ch2 id=\"building-extensions-easier-than-you-think\">\u003Cstrong>Building Extensions: Easier Than You Think\u003C/strong>\u003C/h2>\n\u003Cp>If you have experience in web development and are familiar with TypeScript (TSX), you’ll find that building your own Raycast extensions is surprisingly straightforward. The platform is designed to be developer-friendly, with comprehensive documentation and an active community that’s always willing to help.\u003C/p>\n\u003Cp>Creating custom extensions allows you to tailor Raycast even further to your specific needs, making it not just a tool you use, but a tool that’s uniquely yours. This extensibility is one of Raycast’s most powerful features, and it’s incredibly rewarding to see your own tools in action, seamlessly integrated into your workflow and shared across the community.\u003C/p>\n\u003Cp>I’m excited to share that I’ve developed an extension called \u003Cstrong>Single-Focus\u003C/strong>. This simple yet effective tool allows you to quit all open applications except for the one currently in focus.\u003C/p>\n\u003Cp>You can find it in the Raycast store using the link below to install it\u003C/p>\n\u003Cdiv style=\"display: flex; justify-content: center;\">\n    \u003Ca title=\"Install Single-Focus Raycast Extension\" href=\"https://www.raycast.com/Mmehdi06/single-focus\">\n        \u003Cimg src=\"https://www.raycast.com/Mmehdi06/single-focus/install_button@2x.png?v=1.1\" height=\"80\" alt=\"Install Single-Focus\" style=\"height: 80px;\">\n    \u003C/a>\n\u003C/div>\n\u003Ch2 id=\"ai-features-and-paid-options\">\u003Cstrong>AI Features and Paid Options\u003C/strong>\u003C/h2>\n\u003Cp>Raycast also offers a suite of AI-powered features that take the platform to the next level. One of the most notable is the \u003Cstrong>AI Chat with Presets\u003C/strong>. This feature allows you to integrate AI-driven chat capabilities directly into your workflow, complete with customizable presets for different tasks. Whether you need to draft an email, summarize a document, or brainstorm ideas, the AI chat is there to assist, making it a valuable tool for anyone who relies on creative or analytical work.\u003C/p>\n\u003Cp>While many of Raycast’s features are free, there are also premium options available that unlock additional functionality. These paid features are well worth considering if you find yourself relying heavily on Raycast for your daily tasks, as they can further enhance your productivity and streamline your workflow.\u003C/p>\n\u003Ch2 id=\"conclusion\">\u003Cstrong>Conclusion\u003C/strong>\u003C/h2>\n\u003Cp>Raycast has quickly become an essential part of my daily routine. From its core features like Snippets and Window Management to the expansive world of community-built extensions, it’s a tool that adapts to my needs and grows with my workflow. Whether you’re a developer, project manager, or just someone looking to get more done in less time, Raycast offers something for everyone.\u003C/p>\n\u003Cp>If you’re serious about productivity and you’re on a Mac, I highly recommend giving Raycast a try. With its blend of free features, powerful extensions, and cutting-edge AI capabilities, it’s more than just a launcher—it’s the \u003Cstrong>ultimate productivity companion\u003C/strong>.\u003C/p>",{"headings":30,"imagePaths":50,"frontmatter":51},[31,35,38,41,44,47],{"depth":32,"slug":33,"text":34},2,"what-is-a-launcher-and-why-do-i-need-it","What is a Launcher and Why Do I Need It?",{"depth":32,"slug":36,"text":37},"the-main-features-of-raycast","The Main Features of Raycast",{"depth":32,"slug":39,"text":40},"the-raycast-store-and-community-extensions","The Raycast Store and Community Extensions",{"depth":32,"slug":42,"text":43},"building-extensions-easier-than-you-think","Building Extensions: Easier Than You Think",{"depth":32,"slug":45,"text":46},"ai-features-and-paid-options","AI Features and Paid Options",{"depth":32,"slug":48,"text":49},"conclusion","Conclusion",[21,22,23,24],{"title":14,"tags":52,"cover":25,"description":16,"publishedAt":56},[53,54,55],"raycast","extension","raycast extension",["Date","2024-09-10T00:00:00.000Z"],"nix-darwin",{"id":57,"data":59,"body":64,"filePath":65,"assetImports":66,"digest":68,"rendered":69},{"title":60,"cover":61,"description":62,"publishedAt":63},"From HomeBrew to Nix-Darwin.","__ASTRO_IMAGE_../../assets/post-images/nix-darwin/cover.png","Why and how I Switched from Homebrew to Nix-Darwin",["Date","2024-11-08T00:00:00.000Z"],"## Introduction\n\nFor years, Homebrew has been the go-to package manager for macOS users, renowned for its simplicity and extensive package library. However, after discovering Nix-Darwin, a system configuration tool for macOS based on the Nix package manager, I found a more powerful and flexible solution. While Nix-Darwin has a steeper learning curve, the benefits of declarative configuration, reproducibility, and seamless dotfile management made the switch worthwhile for me.\n\nIn this article, I’ll break down why I switched from Homebrew to Nix-Darwin, share the advantages I’ve found, the challenges I’ve encountered, and provide a guide to replicating a similar configuration.\n\n---\n\n## Why Switch from Homebrew to Nix-Darwin?\n\nHomebrew is popular for its ease of use and broad package support, but for users who want full control over their environment, it has limitations. Here’s why I chose Nix-Darwin over Homebrew:\n\n1. **Declarative Configuration**\n\n    With Nix-Darwin, I define my entire environment in a `flake.nix` file, specifying exactly which packages, settings, and applications I want on my system. Changes to this file are applied consistently and reproducibly across my machine. This approach has allowed me to say goodbye once and for all to the bad habit of installing Homebrew formulas and their dependencies, which I often used once and then forgot to uninstall.\n\n2. **Reproducibility**\n\n    Version-controlling my configuration file in Git, enables me to track changes over time, roll back to previous versions, and easily replicate my setup on new machines. This level of control and security is invaluable, especially if you experiment frequently or use multiple devices. I currently have my [dotfiles](https://github.com/Mmehdi06/dotfiles) as well as my [Nix configuration](https://github.com/Mmehdi06/nix-darwin) in two separate repositories, and this setup works very well for me.\n\n3. **Atomic Updates and Rollbacks**\n\n    Updates in Nix are atomic. Either the update is fully successful, or the system remains in its previous state, which prevents partial installs that might leave the system in a broken state. Additionally, if I run into issues, I can roll back to the last working configuration with minimal hassle.\n\n4. **System-Wide and User-Specific Configuration**\n\n    Nix-Darwin, when combined with Home Manager, offers a clean separation of system-wide packages and user-specific configurations. This structure allows me to set up a personalized environment while ensuring system settings are kept isolated and modular.\n\n5. **Homebrew Integration**\n\n    While Nix’s package library is extensive, it can lag behind Homebrew for niche applications or apps that require timely updates. Fortunately, Nix-Darwin offers an integration with Homebrew, letting me install packages from both Nix and Homebrew, depending on which best meets my needs.\n\n---\n\n## Why Nix-Darwin Isn’t for Everyone\n\nDespite Nix-Darwin’s strengths, it isn’t a solution for every macOS user. Here’s why:\n\n- **Steep Learning Curve**\n\n    Nix-Darwin requires a good grasp of Nix’s syntax and structure, which isn’t as user-friendly as Homebrew’s straightforward approach. Configuring everything and troubleshooting can take time, and certain packages may not work seamlessly with macOS tools or might need to be installed via Homebrew instead.\n\n- **Dotfile Management**\n\n    Managing dotfiles within Nix-Darwin can be complex. I prefer to use symlinks directly to my dotfiles repository, as this approach lets me retain full ownership over the files. This setup has allowed me to integrate my preferred setup with tools like LazyVim within tmux, but it does require some additional manual configuration.\n\n---\n\n## Nix Darwin Installation using flakes\n\nHere's how you can set up a similar Nix-Darwin environment, using the steps I followed and a basic `flakes.nix` configuration.\n\n### Step 1: Generate a Basic `flake.nix` File\n\nIf you don't already have a Nix configuration, you can create one with the following commands:\n\n```bash\nmkdir -p ~/.config/nix\ncd ~/.config/nix\nnix flake init -t nix-darwin\nsed -i '' \"s/simple/$(scutil --get LocalHostName)/\" flake.nix\n```\n> **Note**: If you're on Apple Silicon, change `nixpkgs.hostPlatform` to `aarch64-darwin` in your `flake.nix` file to ensure compatibility.\n\n### Step 2: Install Nix-Darwin\n\nInstead of using the `darwin-installer`, run the following command to install Nix-Darwin with `darwin-rebuild`:\n\n```bash\nnix run nix-darwin -- switch --flake ~/.config/nix\n```\nSince `darwin-rebuild` won't be in your PATH initially, this command will execute it directly from Nix.\n\n### Step 3: Apply Nix-Darwin Configurations\n\nAfter installation, you can apply changes to your system by running:\n\n```bash\ndarwin-rebuild switch --flake ~/.config/nix\n```\nEach time you make updates to your configuration file, this command will apply them, ensuring that your system reflects the latest changes.\n\n> **For More Information**: Consult the [official Nix-Darwin GitHub repository](https://github.com/LnL7/nix-darwin?tab=readme-ov-file#flakes) for detailed documentation and advanced usage tips.\n\n## My Nix-Darwin Configuration: Breaking It Down\n\nNow, let’s dive into my configuration and the choices I made, including system packages, Homebrew integration, and other settings that create a cohesive environment.\n\n### 1. Declarative System Packages\n\nIn my `flakes.nix` configuration, I use Nix-Darwin to install essential command-line tools and utilities that I frequently rely on. Here’s a look at the `environment.systemPackages` section of my configuration:\n\n```nix\nenvironment.systemPackages = [\n  pkgs.git\n  pkgs.gh\n  pkgs.fd\n  pkgs.mkalias\n  pkgs.ripgrep\n  pkgs.bat\n  pkgs.fzf\n  pkgs.zoxide\n  pkgs.lazygit\n  pkgs.eza\n  pkgs.starship\n];\n```\n\nEach of these tools serves a purpose in my workflow:\n- **git & gh**: Essential for version control and GitHub integration.\n- **fd & ripgrep**: For fast file searching, much quicker than the default `find` and `grep` commands.\n- **bat**: A better `cat` with syntax highlighting.\n- **fzf & zoxide**: Command-line navigation tools for faster workflow.\n- **starship**: A customizable shell prompt that shows useful system information at a glance.\n\nThis selection of packages covers core needs, enhancing my command-line experience and productivity.\n\n### 2. Homebrew Integration\n\nNix-Darwin’s native Homebrew support allows me to use certain packages that are more reliable or better supported on Homebrew than Nix, especially for macOS-specific tools or applications not available in Nixpkgs.\n```nix\n\nhomebrew = {\n  enable = true;\n\n  brews = [\n    \"neovim\"\n    \"tmux\"\n    \"zsh-syntax-highlighting\"\n    \"zsh-autosuggestions\"\n    \"mas\"\n  ];\n\n  casks = [\n    \"the-unarchiver\"\n    \"1password\"\n    \"orbstack\"\n    \"wezterm\"\n    \"arc\"\n    \"raycast\"\n  ];\n\n};\n\n```\n\nThis configuration allows me to use **neovim** and **tmux** from Homebrew, as the Nix versions occasionally face issues. Wezterm had for example also a rendering issue known by the community. Additionally, tools like **mas** (Mac App Store CLI) enable automated installation and updates for App Store applications, saving time.\n\n### 3. Keyboard and System Customizations\n\nA big part of my transition to Nix-Darwin was the ability to set system-wide preferences declaratively. Here’s how I’ve customized keyboard and system behavior:\n\n```nix\n\nsystem.keyboard.enableKeyMapping = true;\n\nsystem.keyboard.remapCapsLockToControl = true;\n```\nBy remapping the Caps Lock key to Control, I streamline my workflow, making frequent commands easier to execute in my development environment. This is particularly helpful because I use `Ctrl-hjkl` to navigate between panes in Neovim and tmux with the tmux-navigator plugin.\n\nAdditionally, my `system.defaults` section controls macOS preferences, such as dock behavior and Finder settings:\n\n```nix\n\nsystem.defaults = {\n  dock.autohide = true;\n  dock.autohide-time-modifier = 0.0;\n  dock.autohide-delay = 0.0;\n\n  finder.FXPreferredViewStyle = \"clmv\";\n\n  NSGlobalDomain.AppleInterfaceStyle = \"Dark\";\n  NSGlobalDomain.KeyRepeat = 2;\n};\n\n```\n\nThese settings make my macOS experience faster and more comfortable by reducing visual distractions and enabling dark mode by default.\n\n### 4. Font and Application Aliasing\n\nAnother unique feature of my Nix-Darwin setup is managing fonts and application aliases declaratively:\n\n```nix\n\nfonts.packages = [\n  (pkgs.nerdfonts.override { fonts = [ \"JetBrainsMono\" ]; })\n];\n\n```\n\nThe `JetBrainsMono` font is ideal for coding, and managing it via Nix-Darwin means I don’t have to reinstall it manually across systems. I also create aliases for applications I use frequently:\n\n```applescript\n\nsystem.activationScripts.applications.text = let\n  env = pkgs.buildEnv {\n    name = \"system-applications\";\n    paths = config.environment.systemPackages;\n    pathsToLink = \"/Applications\";\n  };\nin\n  pkgs.lib.mkForce ''\n    # Set up applications.\n    echo \"setting up /Applications...\" >&2\n    rm -rf /Applications/Nix\\ Apps\n    mkdir -p /Applications/Nix\\ Apps\n    find ${env}/Applications -maxdepth 1 -type l -exec readlink '{}' + |\n    while read src; do\n      app_name=$(basename \"$src\")\n      echo \"copying $src\" >&2\n      ${pkgs.mkalias}/bin/mkalias \"$src\" \"/Applications/Nix Apps/$app_name\"\n    done\n  '';\n\n```\n\nThis script helps organize my applications in `/Applications/Nix Apps`, keeping my system directory tidy and organized. Additionally, by creating an alias, these applications become visible in Spotlight search, which they wouldn't be otherwise.\n\n### 5. Managing Dotfiles with Home Manager and Symlinks\n\nManaging dotfiles in Nix-Darwin and Home Manager can be a bit tricky, so I use a hybrid approach by symlinking configurations directly from my dotfiles repository. Here’s how this looks in `flakes.nix`:\n\n```nix\nhome.file = {\n\n  \"/Users/mehdimerkachi/.config/nvim\".source = config.lib.file.mkOutOfStoreSymlink \"/Users/mehdimerkachi/dotfiles/nvim\";\n\n  \"/Users/mehdimerkachi/.config/tmux\".source = config.lib.file.mkOutOfStoreSymlink \"/Users/mehdimerkachi/dotfiles/tmux\";\n\n};\n```\nI had to use symlinks to maintain control over my files and ensure compatibility with specific tools like LazyVim inside tmux. This was necessary because when using Neovim within tmux, the lazy plugin manager couldn't update the plugins; the files in `~/.config/nvim` were owned by the root user, which prevented any modifications due to permission issues.\n\n## Conclusion\n\nThe declarative nature of Nix-Darwin has fundamentally changed how I manage my macOS environment. By defining my entire system configuration in a single `flake.nix` file, I’m motivated to keep everything clean and organized, ensuring that every package and setting is intentional and reproducible. This approach not only enhances my workflow but also provides a clear structure that reduces clutter.\n\nHowever, the transition hasn’t been without its challenges. Navigating the intricacies of Nix-Darwin often requires diving deep into forums and documentation to troubleshoot issues, which can be daunting at times. Despite these hurdles, the control and clarity that come with a declarative setup make the effort worthwhile for anyone serious about maintaining a well-organized system.","src/content/posts/nix-darwin.md",[67],"../../assets/post-images/nix-darwin/cover.png","9285aa198ed6d4b9",{"html":70,"metadata":71},"\u003Ch2 id=\"introduction\">Introduction\u003C/h2>\n\u003Cp>For years, Homebrew has been the go-to package manager for macOS users, renowned for its simplicity and extensive package library. However, after discovering Nix-Darwin, a system configuration tool for macOS based on the Nix package manager, I found a more powerful and flexible solution. While Nix-Darwin has a steeper learning curve, the benefits of declarative configuration, reproducibility, and seamless dotfile management made the switch worthwhile for me.\u003C/p>\n\u003Cp>In this article, I’ll break down why I switched from Homebrew to Nix-Darwin, share the advantages I’ve found, the challenges I’ve encountered, and provide a guide to replicating a similar configuration.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"why-switch-from-homebrew-to-nix-darwin\">Why Switch from Homebrew to Nix-Darwin?\u003C/h2>\n\u003Cp>Homebrew is popular for its ease of use and broad package support, but for users who want full control over their environment, it has limitations. Here’s why I chose Nix-Darwin over Homebrew:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Declarative Configuration\u003C/strong>\u003C/p>\n\u003Cp>With Nix-Darwin, I define my entire environment in a \u003Ccode>flake.nix\u003C/code> file, specifying exactly which packages, settings, and applications I want on my system. Changes to this file are applied consistently and reproducibly across my machine. This approach has allowed me to say goodbye once and for all to the bad habit of installing Homebrew formulas and their dependencies, which I often used once and then forgot to uninstall.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Reproducibility\u003C/strong>\u003C/p>\n\u003Cp>Version-controlling my configuration file in Git, enables me to track changes over time, roll back to previous versions, and easily replicate my setup on new machines. This level of control and security is invaluable, especially if you experiment frequently or use multiple devices. I currently have my \u003Ca href=\"https://github.com/Mmehdi06/dotfiles\">dotfiles\u003C/a> as well as my \u003Ca href=\"https://github.com/Mmehdi06/nix-darwin\">Nix configuration\u003C/a> in two separate repositories, and this setup works very well for me.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Atomic Updates and Rollbacks\u003C/strong>\u003C/p>\n\u003Cp>Updates in Nix are atomic. Either the update is fully successful, or the system remains in its previous state, which prevents partial installs that might leave the system in a broken state. Additionally, if I run into issues, I can roll back to the last working configuration with minimal hassle.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>System-Wide and User-Specific Configuration\u003C/strong>\u003C/p>\n\u003Cp>Nix-Darwin, when combined with Home Manager, offers a clean separation of system-wide packages and user-specific configurations. This structure allows me to set up a personalized environment while ensuring system settings are kept isolated and modular.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Homebrew Integration\u003C/strong>\u003C/p>\n\u003Cp>While Nix’s package library is extensive, it can lag behind Homebrew for niche applications or apps that require timely updates. Fortunately, Nix-Darwin offers an integration with Homebrew, letting me install packages from both Nix and Homebrew, depending on which best meets my needs.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch2 id=\"why-nix-darwin-isnt-for-everyone\">Why Nix-Darwin Isn’t for Everyone\u003C/h2>\n\u003Cp>Despite Nix-Darwin’s strengths, it isn’t a solution for every macOS user. Here’s why:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Steep Learning Curve\u003C/strong>\u003C/p>\n\u003Cp>Nix-Darwin requires a good grasp of Nix’s syntax and structure, which isn’t as user-friendly as Homebrew’s straightforward approach. Configuring everything and troubleshooting can take time, and certain packages may not work seamlessly with macOS tools or might need to be installed via Homebrew instead.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Dotfile Management\u003C/strong>\u003C/p>\n\u003Cp>Managing dotfiles within Nix-Darwin can be complex. I prefer to use symlinks directly to my dotfiles repository, as this approach lets me retain full ownership over the files. This setup has allowed me to integrate my preferred setup with tools like LazyVim within tmux, but it does require some additional manual configuration.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"nix-darwin-installation-using-flakes\">Nix Darwin Installation using flakes\u003C/h2>\n\u003Cp>Here’s how you can set up a similar Nix-Darwin environment, using the steps I followed and a basic \u003Ccode>flakes.nix\u003C/code> configuration.\u003C/p>\n\u003Ch3 id=\"step-1-generate-a-basic-flakenix-file\">Step 1: Generate a Basic \u003Ccode>flake.nix\u003C/code> File\u003C/h3>\n\u003Cp>If you don’t already have a Nix configuration, you can create one with the following commands:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">mkdir\u003C/span>\u003Cspan style=\"color:#CE9178\"> -p\u003C/span>\u003Cspan style=\"color:#CE9178\"> ~/.config/nix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">cd\u003C/span>\u003Cspan style=\"color:#CE9178\"> ~/.config/nix\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">nix\u003C/span>\u003Cspan style=\"color:#CE9178\"> flake\u003C/span>\u003Cspan style=\"color:#CE9178\"> init\u003C/span>\u003Cspan style=\"color:#CE9178\"> -t\u003C/span>\u003Cspan style=\"color:#CE9178\"> nix-darwin\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">sed\u003C/span>\u003Cspan style=\"color:#CE9178\"> -i\u003C/span>\u003Cspan style=\"color:#CE9178\"> ''\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"s/simple/$(\u003C/span>\u003Cspan style=\"color:#DCDCAA\">scutil\u003C/span>\u003Cspan style=\"color:#CE9178\"> --get LocalHostName)/\"\u003C/span>\u003Cspan style=\"color:#CE9178\"> flake.nix\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>Note\u003C/strong>: If you’re on Apple Silicon, change \u003Ccode>nixpkgs.hostPlatform\u003C/code> to \u003Ccode>aarch64-darwin\u003C/code> in your \u003Ccode>flake.nix\u003C/code> file to ensure compatibility.\u003C/p>\n\u003C/blockquote>\n\u003Ch3 id=\"step-2-install-nix-darwin\">Step 2: Install Nix-Darwin\u003C/h3>\n\u003Cp>Instead of using the \u003Ccode>darwin-installer\u003C/code>, run the following command to install Nix-Darwin with \u003Ccode>darwin-rebuild\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">nix\u003C/span>\u003Cspan style=\"color:#CE9178\"> run\u003C/span>\u003Cspan style=\"color:#CE9178\"> nix-darwin\u003C/span>\u003Cspan style=\"color:#CE9178\"> --\u003C/span>\u003Cspan style=\"color:#CE9178\"> switch\u003C/span>\u003Cspan style=\"color:#CE9178\"> --flake\u003C/span>\u003Cspan style=\"color:#CE9178\"> ~/.config/nix\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since \u003Ccode>darwin-rebuild\u003C/code> won’t be in your PATH initially, this command will execute it directly from Nix.\u003C/p>\n\u003Ch3 id=\"step-3-apply-nix-darwin-configurations\">Step 3: Apply Nix-Darwin Configurations\u003C/h3>\n\u003Cp>After installation, you can apply changes to your system by running:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">darwin-rebuild\u003C/span>\u003Cspan style=\"color:#CE9178\"> switch\u003C/span>\u003Cspan style=\"color:#CE9178\"> --flake\u003C/span>\u003Cspan style=\"color:#CE9178\"> ~/.config/nix\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Each time you make updates to your configuration file, this command will apply them, ensuring that your system reflects the latest changes.\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>For More Information\u003C/strong>: Consult the \u003Ca href=\"https://github.com/LnL7/nix-darwin?tab=readme-ov-file#flakes\">official Nix-Darwin GitHub repository\u003C/a> for detailed documentation and advanced usage tips.\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"my-nix-darwin-configuration-breaking-it-down\">My Nix-Darwin Configuration: Breaking It Down\u003C/h2>\n\u003Cp>Now, let’s dive into my configuration and the choices I made, including system packages, Homebrew integration, and other settings that create a cohesive environment.\u003C/p>\n\u003Ch3 id=\"1-declarative-system-packages\">1. Declarative System Packages\u003C/h3>\n\u003Cp>In my \u003Ccode>flakes.nix\u003C/code> configuration, I use Nix-Darwin to install essential command-line tools and utilities that I frequently rely on. Here’s a look at the \u003Ccode>environment.systemPackages\u003C/code> section of my configuration:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nix\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">environment\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">systemPackages\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">gh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">fd\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">mkalias\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">ripgrep\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">bat\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">fzf\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">zoxide\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">lazygit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">eza\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">starship\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">]\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Each of these tools serves a purpose in my workflow:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>git &#x26; gh\u003C/strong>: Essential for version control and GitHub integration.\u003C/li>\n\u003Cli>\u003Cstrong>fd &#x26; ripgrep\u003C/strong>: For fast file searching, much quicker than the default \u003Ccode>find\u003C/code> and \u003Ccode>grep\u003C/code> commands.\u003C/li>\n\u003Cli>\u003Cstrong>bat\u003C/strong>: A better \u003Ccode>cat\u003C/code> with syntax highlighting.\u003C/li>\n\u003Cli>\u003Cstrong>fzf &#x26; zoxide\u003C/strong>: Command-line navigation tools for faster workflow.\u003C/li>\n\u003Cli>\u003Cstrong>starship\u003C/strong>: A customizable shell prompt that shows useful system information at a glance.\u003C/li>\n\u003C/ul>\n\u003Cp>This selection of packages covers core needs, enhancing my command-line experience and productivity.\u003C/p>\n\u003Ch3 id=\"2-homebrew-integration\">2. Homebrew Integration\u003C/h3>\n\u003Cp>Nix-Darwin’s native Homebrew support allows me to use certain packages that are more reliable or better supported on Homebrew than Nix, especially for macOS-specific tools or applications not available in Nixpkgs.\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nix\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">homebrew\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  enable\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#569CD6\"> true\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  brews\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"neovim\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"tmux\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"zsh-syntax-highlighting\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"zsh-autosuggestions\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"mas\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  casks\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"the-unarchiver\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"1password\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"orbstack\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"wezterm\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"arc\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">    \"raycast\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">}\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This configuration allows me to use \u003Cstrong>neovim\u003C/strong> and \u003Cstrong>tmux\u003C/strong> from Homebrew, as the Nix versions occasionally face issues. Wezterm had for example also a rendering issue known by the community. Additionally, tools like \u003Cstrong>mas\u003C/strong> (Mac App Store CLI) enable automated installation and updates for App Store applications, saving time.\u003C/p>\n\u003Ch3 id=\"3-keyboard-and-system-customizations\">3. Keyboard and System Customizations\u003C/h3>\n\u003Cp>A big part of my transition to Nix-Darwin was the ability to set system-wide preferences declaratively. Here’s how I’ve customized keyboard and system behavior:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nix\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">system\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">keyboard\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">enableKeyMapping\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#569CD6\"> true\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">system\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">keyboard\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">remapCapsLockToControl\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#569CD6\"> true\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>By remapping the Caps Lock key to Control, I streamline my workflow, making frequent commands easier to execute in my development environment. This is particularly helpful because I use \u003Ccode>Ctrl-hjkl\u003C/code> to navigate between panes in Neovim and tmux with the tmux-navigator plugin.\u003C/p>\n\u003Cp>Additionally, my \u003Ccode>system.defaults\u003C/code> section controls macOS preferences, such as dock behavior and Finder settings:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nix\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">system\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">defaults\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  dock\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">autohide\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#569CD6\"> true\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  dock\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">autohide-time-modifier\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#B5CEA8\"> 0\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#B5CEA8\">0\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  dock\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">autohide-delay\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#B5CEA8\"> 0\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#B5CEA8\">0\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  finder\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">FXPreferredViewStyle\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"clmv\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  NSGlobalDomain\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">AppleInterfaceStyle\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"Dark\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">  NSGlobalDomain\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">KeyRepeat\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#B5CEA8\"> 2\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">}\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>These settings make my macOS experience faster and more comfortable by reducing visual distractions and enabling dark mode by default.\u003C/p>\n\u003Ch3 id=\"4-font-and-application-aliasing\">4. Font and Application Aliasing\u003C/h3>\n\u003Cp>Another unique feature of my Nix-Darwin setup is managing fonts and application aliases declaratively:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nix\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">fonts\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">packages\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  (\u003C/span>\u003Cspan style=\"color:#9CDCFE\">pkgs\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">nerdfonts\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">override\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> { \u003C/span>\u003Cspan style=\"color:#9CDCFE\">fonts\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> [ \u003C/span>\u003Cspan style=\"color:#CE9178\">\"JetBrainsMono\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> ]; })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">]\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>JetBrainsMono\u003C/code> font is ideal for coding, and managing it via Nix-Darwin means I don’t have to reinstall it manually across systems. I also create aliases for applications I use frequently:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"applescript\">\u003Ccode>\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">system.activationScripts.\u003C/span>\u003Cspan style=\"color:#4EC9B0\">applications\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#4EC9B0\">text\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> let\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  env \u003C/span>\u003Cspan style=\"color:#D4D4D4\">=\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> pkgs.buildEnv {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#DCDCAA\">    name\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"system-applications\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    paths \u003C/span>\u003Cspan style=\"color:#D4D4D4\">=\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> config.environment.systemPackages;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    pathsToLink \u003C/span>\u003Cspan style=\"color:#D4D4D4\">=\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"/Applications\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#569CD6\">in\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  pkgs.lib.mkForce ''\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A9955\">    # Set up applications.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    echo \u003C/span>\u003Cspan style=\"color:#CE9178\">\"setting up /Applications...\"\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> >&#x26;\u003C/span>\u003Cspan style=\"color:#B5CEA8\">2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    rm \u003C/span>\u003Cspan style=\"color:#D4D4D4\">-\u003C/span>\u003Cspan style=\"color:#E6E6E6\">rf \u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#4EC9B0\">Applications\u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#E6E6E6\">Nix\\ \u003C/span>\u003Cspan style=\"color:#4EC9B0\">Apps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    mkdir \u003C/span>\u003Cspan style=\"color:#D4D4D4\">-\u003C/span>\u003Cspan style=\"color:#E6E6E6\">p \u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#4EC9B0\">Applications\u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#E6E6E6\">Nix\\ \u003C/span>\u003Cspan style=\"color:#4EC9B0\">Apps\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    find ${env}\u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#4EC9B0\">Applications\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> -\u003C/span>\u003Cspan style=\"color:#E6E6E6\">maxdepth \u003C/span>\u003Cspan style=\"color:#B5CEA8\">1\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> -\u003C/span>\u003Cspan style=\"color:#E6E6E6\">type l \u003C/span>\u003Cspan style=\"color:#D4D4D4\">-\u003C/span>\u003Cspan style=\"color:#E6E6E6\">exec readlink '{}' \u003C/span>\u003Cspan style=\"color:#D4D4D4\">+\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#569CD6\">    while\u003C/span>\u003Cspan style=\"color:#DCDCAA\"> read\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> src; do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">      app_name\u003C/span>\u003Cspan style=\"color:#D4D4D4\">=\u003C/span>\u003Cspan style=\"color:#E6E6E6\">$(basename \u003C/span>\u003Cspan style=\"color:#CE9178\">\"$src\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">      echo \u003C/span>\u003Cspan style=\"color:#CE9178\">\"copying $src\"\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> >&#x26;\u003C/span>\u003Cspan style=\"color:#B5CEA8\">2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">      ${pkgs.mkalias}\u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#E6E6E6\">bin\u003C/span>\u003Cspan style=\"color:#D4D4D4\">/\u003C/span>\u003Cspan style=\"color:#E6E6E6\">mkalias \u003C/span>\u003Cspan style=\"color:#CE9178\">\"$src\"\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"/Applications/Nix Apps/$app_name\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">    done\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">  '';\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This script helps organize my applications in \u003Ccode>/Applications/Nix Apps\u003C/code>, keeping my system directory tidy and organized. Additionally, by creating an alias, these applications become visible in Spotlight search, which they wouldn’t be otherwise.\u003C/p>\n\u003Ch3 id=\"5-managing-dotfiles-with-home-manager-and-symlinks\">5. Managing Dotfiles with Home Manager and Symlinks\u003C/h3>\n\u003Cp>Managing dotfiles in Nix-Darwin and Home Manager can be a bit tricky, so I use a hybrid approach by symlinking configurations directly from my dotfiles repository. Here’s how this looks in \u003Ccode>flakes.nix\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code slack-dark\" style=\"background-color:#222222;color:#E6E6E6; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"nix\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#9CDCFE\">home\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">file\u003C/span>\u003Cspan style=\"color:#F44747\"> =\u003C/span>\u003Cspan style=\"color:#E6E6E6\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">  \"/Users/mehdimerkachi/.config/nvim\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">source\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#9CDCFE\"> config\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">lib\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">file\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">mkOutOfStoreSymlink\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"/Users/mehdimerkachi/dotfiles/nvim\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#CE9178\">  \"/Users/mehdimerkachi/.config/tmux\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">source\u003C/span>\u003Cspan style=\"color:#D4D4D4\"> =\u003C/span>\u003Cspan style=\"color:#9CDCFE\"> config\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">lib\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">file\u003C/span>\u003Cspan style=\"color:#D4D4D4\">.\u003C/span>\u003Cspan style=\"color:#9CDCFE\">mkOutOfStoreSymlink\u003C/span>\u003Cspan style=\"color:#CE9178\"> \"/Users/mehdimerkachi/dotfiles/tmux\"\u003C/span>\u003Cspan style=\"color:#E6E6E6\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6E6E6\">}\u003C/span>\u003Cspan style=\"color:#F44747\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I had to use symlinks to maintain control over my files and ensure compatibility with specific tools like LazyVim inside tmux. This was necessary because when using Neovim within tmux, the lazy plugin manager couldn’t update the plugins; the files in \u003Ccode>~/.config/nvim\u003C/code> were owned by the root user, which prevented any modifications due to permission issues.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>The declarative nature of Nix-Darwin has fundamentally changed how I manage my macOS environment. By defining my entire system configuration in a single \u003Ccode>flake.nix\u003C/code> file, I’m motivated to keep everything clean and organized, ensuring that every package and setting is intentional and reproducible. This approach not only enhances my workflow but also provides a clear structure that reduces clutter.\u003C/p>\n\u003Cp>However, the transition hasn’t been without its challenges. Navigating the intricacies of Nix-Darwin often requires diving deep into forums and documentation to troubleshoot issues, which can be daunting at times. Despite these hurdles, the control and clarity that come with a declarative setup make the effort worthwhile for anyone serious about maintaining a well-organized system.\u003C/p>",{"headings":72,"imagePaths":114,"frontmatter":115},[73,76,79,82,85,89,92,95,98,101,104,107,110,113],{"depth":32,"slug":74,"text":75},"introduction","Introduction",{"depth":32,"slug":77,"text":78},"why-switch-from-homebrew-to-nix-darwin","Why Switch from Homebrew to Nix-Darwin?",{"depth":32,"slug":80,"text":81},"why-nix-darwin-isnt-for-everyone","Why Nix-Darwin Isn’t for Everyone",{"depth":32,"slug":83,"text":84},"nix-darwin-installation-using-flakes","Nix Darwin Installation using flakes",{"depth":86,"slug":87,"text":88},3,"step-1-generate-a-basic-flakenix-file","Step 1: Generate a Basic flake.nix File",{"depth":86,"slug":90,"text":91},"step-2-install-nix-darwin","Step 2: Install Nix-Darwin",{"depth":86,"slug":93,"text":94},"step-3-apply-nix-darwin-configurations","Step 3: Apply Nix-Darwin Configurations",{"depth":32,"slug":96,"text":97},"my-nix-darwin-configuration-breaking-it-down","My Nix-Darwin Configuration: Breaking It Down",{"depth":86,"slug":99,"text":100},"1-declarative-system-packages","1. Declarative System Packages",{"depth":86,"slug":102,"text":103},"2-homebrew-integration","2. Homebrew Integration",{"depth":86,"slug":105,"text":106},"3-keyboard-and-system-customizations","3. Keyboard and System Customizations",{"depth":86,"slug":108,"text":109},"4-font-and-application-aliasing","4. Font and Application Aliasing",{"depth":86,"slug":111,"text":112},"5-managing-dotfiles-with-home-manager-and-symlinks","5. Managing Dotfiles with Home Manager and Symlinks",{"depth":32,"slug":48,"text":49},[],{"title":60,"tags":116,"cover":67,"description":62,"publishedAt":121},[117,118,119,120],"Nix","Homebrew","Package Manager","MacOS",["Date","2024-11-08T00:00:00.000Z"]]